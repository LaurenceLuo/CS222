1. Basic information
Team number (e.g., 01) : 16
#1 Student ID : 94681045
#1 Student Name : Lintong Luo
#2 Student ID : 48964286
#2 Student Name : Tzu-Chi Lin
OS (bit) : ubuntu16.04.4-6 x86_64
gcc version : gcc (GCC) 4.8.5 20150623


2. Catalog information about Index
- Show your catalog information about an index (tables, columns). 
We add a new column to record whether the attribute has index file or not in Table of Columns

Columns(table-id:int, column-name:varchar(50), column-type:int, column-length:int, column-position:int, index:int)


3. Block Nested Loop Join (If you have implemented this feature)
- Describe how your block nested loop join works (especially, how you manage the given buffers.)
We use std::map to manage the given buffers. Each record inside the map is associated with its offset and length. Given the buffer size, firstly we load the left table to fill the buffer and build the map for the buffer. Then we do map compare of the record from the right table one by one with records in the map by given attribute. If matched, combine the two records into the output and erase the record from the map and start from the beginning of the right table again, until the buffer is empty, then reload.


4. Index Nested Loop Join (If you have implemented this feature)
- Describe how your grace hash join works.
The INLJoin iterator takes two iterators as input, leftIn iterator and rightIn (IndexScan). The "leftIn" iterator is the outer relation, and the "rightIn" iterator is the inner relation. We then combined the returned attributes of tuples from leftIn and rightIn.

5. Grace Hash Join (If you have implemented this feature)
- Describe how your grace hash join works (especially, in-memory structure).
Not implemented.

6. Aggregation
- Describe how your aggregation (basic, group-based hash) works.
We add a new class AggregateData to store the value for MIN, MAX, SUM, AVG, COUNT. For AVG, the output should be a real value. Otherwise, the output should be an integer value.
We do not implement group-by feature.

7. Implementation Detail
- Have you added your own source file (.cc or .h)?
No, but we implement new Class AggregateData to store the value for aggregate.

- Have you implemented any optional features? Then, describe them here.
No.

- Other implementation details:


6. Other (optional)
- Freely use this section to tell us about things that are related to the project 4, but not related to the other sections (optional)

