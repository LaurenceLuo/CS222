1. Basic information
Team number (e.g., 01) : 16
#1 Student ID : 94681045
#1 Student Name : Lintong Luo
#2 Student ID : 48964284
#2 Student Name : Tzu-Chi Lin
OS (bit) : ubuntu16.04.4-6 x86_64
gcc version : gcc 5.4.0


2. Meta-data
Tables table: (table-id:int, table-name:varchar(50), file-name:varchar(50))
Since there is no NULL in this table, we can store its data directly. Just need to have a varCharLength before the table-name to store the length of the table. And the file-name is the same as the table-name, so we do not habe to store its length.
-- int  -- --    short  -- --    varchar   -- --   varchar  --
---------------------------------------------------------------
| table-id | varcharLength |    table-name   |   file-name    |
---------------------------------------------------------------

Columns table: (table-id:int, column-name:varchar(50), column-type:int, column-length:int, column-position:int)
Since there is no NULL in this table, we can store its data directly. Just need to have a varCharLength before the column-name to store the length of the table.
-   int   - short - varchar    -    int    -        int     -     int    
-----------------------------------------------------------------------------
| table-id| length| column-name| column-type| column-length |column-position|
-----------------------------------------------------------------------------


3. Internal Record Format
The record format is modified based on variable-length record on the lecture notes with slight changes. First 2 bytes(short int) are used for storing the total number of attributes counted, followed by the attribute descriptors for each attribute, which is the offset value for corresponding field data, each with 2 bytes(short int). Checking the offset value for each field data, which can directly lead to the data’s position, results in O(1) complexity. If the field data is NULL, the offset will be set as the length of the whole descriptor part (pointing to the beginning of the real data). 

For a VarChar field, the format is the same as the instruction from the Project 1 Description web. First 4 bytes are used for storing the length of the data, followed by the characters data. 

For example, inserting a 4-field record with types varchar(30), int, real and int(‘Anteater’, ’25’, ‘177.8’, NULL), the corresponding formatted record will be like this: [2 bytes for the field number 4(short int)][8 bytes for offsets, each with 2 bytes for offset values:{14}{18}{22}{10}][4 bytes for the length 8][8 bytes for ‘Anteater’][4 bytes for the int ’25’][4 bytes for the float ‘188.7’][0 byte for NULL].

For deleting record, we first read the page that contains the record into memory, and read the slots and slots information. And we locate the record by the given rid and check the record length, which is used to store not the only the length information, but also as the indication of deleted(DELETE_MARK=-2) or updated(TOMBSTONE=-3). If the record length equals to DELETE_MARK, return -1. If the record length equals to TOMBSTONE, we would call deleteRecord recursively until we reach the record and delete. Once find the record, we would first shift the content behind it backward and set the slot length to DELETE_MARK, and then update the directory, slots information and the directory page.

For updating record, we would also first read the corresponding page and record. If the record length equals to DELETE_MARK, return -1. If the record length equals to TOMBSTONE, we would call updateRecord recursively as well. Regarding the new record length, three cases are considered: 
i) new record length < old record length: It’s similar to the delete case. First we do the shifting backward and update information about directory, slots and directory page. Then we update the record and we are done. 
ii) new record length > old record length and the current page still has enough space to hold it: This case is also done with firstly shifting forward by size difference, and then do the updating. 
iii) new record length > old record length but the current page cannot hold it: For this situation, we firstly find a page with enough space and put the record there with a known RID. Then we do the shifting but left the space for one RID and update information directory, slots and directory page. Finally we remain this new RID in the original record position as a direction and set the slot length to TOMBSTONE. 


4. Page Format
There are two types of pages: Directory Page and Data Page.
For Directory Page, the whole page is divided into 512 sections, each with 8 bytes. The first section is used for storing the information of current directory number and next directory number. The 2-512 sections are used for storing information of the page number(int) and the free space offset(int) of each page. Each Directory Page can hold directory information for 511 Data Pages. New Directory Pages are appended if space runs out.

For Data Page, firstly, there is a page description of the number of current slots(int) and free space offset pointer(int) attached at the end of the page. Then each slot directory information, including the length of that slot and the free space offset pointer, is attached before the page description one by one. The actual record data are inserted from the beginning of the page one by one.

The whole page structure is implemented as one Directory Page followed by 511 Data Page, and then one Directory Page and 511 Data Page…so forth.

For updating and deleting, the only thing that will be influenced page-wise is the directory page, which hold free space information for each page. We only need to update the free space accordingly. For data page, it’s already been handled during the process.


5. File Format
First we store two meta-data tables as two files “Table” and “Columns”. Then we store each table as individual file and their actual data in it. And we store their corresponding information into “Table” and “Columns” tables.


6. Implementation Detail
Our format of Tables table and Columns table is different from other format in other table (say, user tables). We did not notice that in testcase 14, 15, we need to scan the Tables and Columns table. It will have a problem in our system since our RBFM scan is based on the format we store in user table. And our RM scan just call RBFM scan, so it cannot scan the format in Tables and Columns table. When we find this problem, we do not have enough time to change the format.


7. Other (optional)
